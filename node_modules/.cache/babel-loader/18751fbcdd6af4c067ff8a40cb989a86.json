{"ast":null,"code":"import _classCallCheck from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexkim/code/web-homework-master/src/App.js\";\nimport React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nvar TwitterTextArea =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTextArea, _Component);\n\n  function TwitterTextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTextArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTextArea).call(this, props));\n    _this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n      prevSearches: {// { \"da\" : [ {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.requestSuggestions = _this.requestSuggestions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.useSuggestion = _this.useSuggestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TwitterTextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var currentText = e.target.value; // this is the entire value of textarea\n\n      this.setState({\n        currentInput: currentText,\n        charactersLeft: 280 - currentText.length\n      });\n      var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n      //now looking for any possible tagging and then making possible changes\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n          // if first character is @ and second character is letter or number\n          //continue search\n          // console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n          // console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n          var noAtSymbol = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n          // HAVE WE ALREADY SEARCHED FOR THIS??\n\n          console.log(\"already searched?\");\n          console.log(Boolean(this.state.prevSearches[noAtSymbol]));\n\n          if (Boolean(this.state.prevSearches[noAtSymbol]) == false) {\n            // IF NEVER SEARCHED BEFORE!!!\n            // let's search for it now\n            // then get the results and store it in THIS.state\n            // then we're going to put that shit on the page.\n            axios.get(\"http://localhost:4000/twitter/user/search?username=\" + typed).then(function (res) {\n              // console.log(res.data.users);\n              var allUsers = res.data.users;\n              var sixSuggestions = allUsers.slice(0, 6);\n              console.log(sixSuggestions); // looping through the 6 item array to get the info we want\n\n              for (var _i = 0; _i < sixSuggestions.length; _i++) {\n                var screen_name = sixSuggestions[_i].screen_name; // CUBS\n\n                var profile_image_url = sixSuggestions[_i].profile_image_url; //cubs.jpg\n                // {\"screen_name\": screen_name, \"profile_image_url\": profile_image_url}\n\n                return {\n                  \"screen_name\": screen_name,\n                  \"profile_image_url\": profile_image_url\n                };\n              } // this.setState({currentSuggestions: FinalSuggestions})\n\n            });\n            console.log(\"results\", results); // this.setState({\n            //   prevSearches:\n            // })\n            // this.requestSuggestions(noAtSymbol); // SEARCHING\n          } // this.setState({ currentSearch: noAtSymbol});\n\n        } else {\n          this.setState({\n            currentSearch: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"requestSuggestions\",\n    value: function requestSuggestions(typed) {}\n  }, {\n    key: \"useSuggestion\",\n    value: function useSuggestion(name) {\n      console.log(\"selected name\", name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var displaySuggestions = this.state.currentSuggestions.map(function (user, index) {\n        return React.createElement(Suggestion, {\n          screen_name: user.screen_name,\n          src: _this2.state.currentSuggestions[index].profile_image_url,\n          onClick: _this2.useSuggestion,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        id: \"tweetZone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        id: \"tweetBox\",\n        onChange: this.handleChange,\n        autoFocus: \"autoFocus\",\n        maxLength: \"280\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, this.state.charactersLeft), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, displaySuggestions));\n    }\n  }]);\n\n  return TwitterTextArea;\n}(Component);\n\nexport default TwitterTextArea;","map":{"version":3,"sources":["/Users/alexkim/code/web-homework-master/src/App.js"],"names":["React","Component","debounce","axios","Suggestion","TwitterTextArea","props","state","currentInput","currentSearch","currentSuggestions","charactersLeft","prevSearches","handleChange","bind","requestSuggestions","useSuggestion","e","currentText","target","value","setState","length","currentTextArray","split","i","test","charAt","noAtSymbol","slice","console","log","Boolean","get","typed","then","res","allUsers","data","users","sixSuggestions","screen_name","profile_image_url","results","name","displaySuggestions","map","user","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport './App.css';\nimport Suggestion from './Suggestion';\n\n\n\n\nclass TwitterTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n\n      prevSearches : {\n        // { \"da\" : [ {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n        }\n\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.requestSuggestions = this.requestSuggestions.bind(this);\n    this.useSuggestion = this.useSuggestion.bind(this);\n  }\n\n\n\n  handleChange (e) {\n    var currentText = e.target.value; // this is the entire value of textarea\n    this.setState({\n      currentInput: currentText,\n      charactersLeft: 280 - currentText.length\n    });\n    var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n\n    //now looking for any possible tagging and then making possible changes\n    for (var i = 0; i < currentTextArray.length; i++) {\n      if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n        // if first character is @ and second character is letter or number\n        //continue search\n        // console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n        // console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n        let noAtSymbol = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n\n        // HAVE WE ALREADY SEARCHED FOR THIS??\n        console.log(\"already searched?\");\n        console.log(Boolean(this.state.prevSearches[noAtSymbol]));\n        if (Boolean(this.state.prevSearches[noAtSymbol]) == false  ) {  // IF NEVER SEARCHED BEFORE!!!\n          // let's search for it now\n          // then get the results and store it in THIS.state\n          // then we're going to put that shit on the page.\n\n          axios.get(\"http://localhost:4000/twitter/user/search?username=\" + typed).then(res => {\n            // console.log(res.data.users);\n            const allUsers = res.data.users;\n            const sixSuggestions = allUsers.slice(0, 6);\n            console.log(sixSuggestions);\n\n            // looping through the 6 item array to get the info we want\n            for (let i = 0; i < sixSuggestions.length; i++) {\n              let screen_name = sixSuggestions[i].screen_name;  // CUBS\n              let profile_image_url = sixSuggestions[i].profile_image_url; //cubs.jpg\n              // {\"screen_name\": screen_name, \"profile_image_url\": profile_image_url}\n              return {\"screen_name\": screen_name, \"profile_image_url\": profile_image_url};\n\n            }\n            // this.setState({currentSuggestions: FinalSuggestions})\n          })\n          console.log(\"results\", results);\n          // this.setState({\n          //   prevSearches:\n          // })\n\n          // this.requestSuggestions(noAtSymbol); // SEARCHING\n\n\n        }\n\n\n        // this.setState({ currentSearch: noAtSymbol});\n\n      } else {\n        this.setState({ currentSearch: \"\"});\n\n      }\n    }\n\n  }\n  requestSuggestions(typed) {\n\n  }\n  useSuggestion(name) {\n    console.log(\"selected name\", name);\n\n  }\n  render() {\n    const displaySuggestions = this.state.currentSuggestions.map((user, index) =>\n      <Suggestion screen_name={user.screen_name} src={this.state.currentSuggestions[index].profile_image_url} onClick={this.useSuggestion} key={index}/>\n    )\n    return (\n      <div id=\"tweetZone\">\n        <textarea\n          type=\"text\"\n          id=\"tweetBox\"\n          onChange={this.handleChange}\n          autoFocus=\"autoFocus\"\n          maxLength=\"280\"/>\n        <p>{this.state.charactersLeft}</p>\n        <ul>{displaySuggestions}</ul>\n    </div>);\n  }\n}\n\nexport default TwitterTextArea;\n"]},"metadata":{},"sourceType":"module"}