{"ast":null,"code":"import _classCallCheck from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexkim/code/web-homework-master/src/App.js\";\nimport React, { Component } from 'react'; // import debounce from 'lodash/debounce';\n\nimport axios from 'axios'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nvar TwitterTextArea =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTextArea, _Component);\n\n  function TwitterTextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTextArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTextArea).call(this, props));\n    _this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      selected: \"\",\n      charactersLeft: 280,\n      prevSearches: {// \"da\" : [\n        //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n        //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n        // ]\n        // ,\n        // \"sprout\" : [\n        //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n        //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n        // ]\n      }\n    };\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this))); // this.requestSuggestions = this.requestSuggestions.bind(this);\n    // this.useSuggestion = this.useSuggestion.bind(this);\n\n    return _this;\n  }\n\n  _createClass(TwitterTextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var _this2 = this;\n\n      var currentText = e.target.value; // this is the entire value of textarea\n\n      this.setState({\n        currentInput: currentText,\n        charactersLeft: 280 - currentText.length\n      });\n      var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n      //now looking for any possible tagging and then making possible changes\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3 && currentTextArray[i].charAt(currentTextArray[i].length) != \" \") {\n          var results;\n\n          (function () {\n            // if first character is @ and second character is letter or number\n            //continue search\n            var cleanSearch = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n\n            _this2.setState({\n              currentSearch: cleanSearch\n            }); // CHECKING IF WE ALREADY HAVE SEARCHED THIS\n\n\n            if (!Boolean(_this2.state.prevSearches[cleanSearch])) {\n              // let's search for it now\n              // then get the results and store it in THIS.STATE\n              // then we're going to put that shit on the page.\n              console.log(\"1 this has never been searched before\");\n              console.log(\"2 new search!\", cleanSearch);\n              results = [];\n              axios.get(\"http://localhost:4000/twitter/user/search?username=\" + cleanSearch).then(function (res) {\n                // console.log(res.data.users);\n                var allUsers = res.data.users;\n                var sixSuggestions = allUsers.slice(0, 6); // console.log(sixSuggestions);\n                // looping through the 6 item array to get the info we want\n\n                for (var k = 0; k < sixSuggestions.length; k++) {\n                  var screen_name = sixSuggestions[k].screen_name; // CUBS\n\n                  var profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n\n                  results.push({\n                    \"screen_name\": screen_name,\n                    \"profile_image_url\": profile_image_url\n                  });\n                }\n\n                var thisstateprevSearches = _this2.state.prevSearches; //creating pseuedo object\n\n                thisstateprevSearches[cleanSearch] = results; // adding to that pseudo object\n\n                _this2.setState({\n                  prevSearches: thisstateprevSearches\n                }); // setting state to pseudo object\n\n              }); // END AXIOS CALL\n            } else {\n              console.log(\"a: this already has been searched\");\n              console.log(\"b:so let's query this information\");\n            }\n          })();\n        } else {\n          // this is just a normal word being typed. NOT a tag\n          this.setState({\n            currentSearch: \"\"\n          });\n        }\n      } // END FOR LOOP THAT GOES THROUGH EACH WORD\n\n    }\n  }, {\n    key: \"handleSelect\",\n    value: function handleSelect(name) {\n      console.log(\"name\", name);\n      self.setState({\n        selected: name\n      });\n      var currentTextArray = this.state.currentText.split(\" \");\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (currentTextArray[i] == \"@\" + this.state.currentSearch) {\n          currentTextArray[i] = \"@\" + this.state.selected + \" \";\n        }\n      }\n\n      var currentTextArrayJoined = currentTextArray.join(\" \");\n      self.setState({\n        curentText: currentTextArrayJoined\n      });\n      document.getElementById(\"tweetBox\").value = this.state.currentText;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // console.log(\"render=====\");\n      // console.log(Boolean(this.state.currentSearch));\n      // console.log(this.state.currentSearch);\n      // console.log(this.state.prevSearches[this.state.currentSearch]);\n      if (this.state.currentSearch) {\n        var currentSearch = this.state.currentSearch;\n        var dataArray = this.state.prevSearches[currentSearch]; // console.log(\"dataArray\", dataArray);\n\n        if (dataArray) {\n          // console.log(\"aaa\");\n          var displaySuggestions = dataArray.map(function (user, index) {\n            return React.createElement(Suggestion, {\n              screen_name: user.screen_name,\n              src: user.profile_image_url,\n              onSelect: _this3.handleSelect,\n              key: index,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116\n              },\n              __self: this\n            });\n          });\n        } else {\n          // console.log(\"bbb\");\n          var displaySuggestions = \"\";\n        }\n      } else {// console.log(\"not yet\");\n      }\n\n      return React.createElement(\"div\", {\n        id: \"tweetZone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        id: \"tweetBox\",\n        onChange: this.handleChange,\n        autoFocus: \"autoFocus\",\n        maxLength: \"280\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, this.state.charactersLeft), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, displaySuggestions));\n    }\n  }]);\n\n  return TwitterTextArea;\n}(Component);\n\nexport default TwitterTextArea;","map":{"version":3,"sources":["/Users/alexkim/code/web-homework-master/src/App.js"],"names":["React","Component","axios","Suggestion","TwitterTextArea","props","state","currentInput","currentSearch","selected","charactersLeft","prevSearches","self","handleChange","bind","e","currentText","target","value","setState","length","currentTextArray","split","i","test","charAt","results","cleanSearch","slice","Boolean","console","log","get","then","res","allUsers","data","users","sixSuggestions","k","screen_name","profile_image_url","push","thisstateprevSearches","name","currentTextArrayJoined","join","curentText","document","getElementById","dataArray","displaySuggestions","map","user","index","handleSelect"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import debounce from 'lodash/debounce';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nclass TwitterTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      selected: \"\",\n      charactersLeft: 280,\n\n      prevSearches : {\n         // \"da\" : [\n         //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n         //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n         // ]\n         // ,\n         // \"sprout\" : [\n         //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n         //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n         // ]\n       }\n\n    };\n\n    var self = this;\n    this.handleChange = this.handleChange.bind(this);\n    // this.requestSuggestions = this.requestSuggestions.bind(this);\n    // this.useSuggestion = this.useSuggestion.bind(this);\n  }\n  handleChange(e) {\n    var currentText = e.target.value; // this is the entire value of textarea\n    this.setState({\n      currentInput: currentText,\n      charactersLeft: 280 - currentText.length\n    });\n    var currentTextArray = currentText.split(\" \");\n    // going to split(\" \") by each word\n    //now looking for any possible tagging and then making possible changes\n    for (var i = 0; i < currentTextArray.length; i++) {\n\n\n      if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3 && currentTextArray[i].charAt(currentTextArray[i].length) != \" \") {\n        // if first character is @ and second character is letter or number\n        //continue search\n        let cleanSearch = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n        this.setState({ currentSearch: cleanSearch })\n\n        // CHECKING IF WE ALREADY HAVE SEARCHED THIS\n        if ( !Boolean(this.state.prevSearches[cleanSearch]) ) {\n            // let's search for it now\n            // then get the results and store it in THIS.STATE\n            // then we're going to put that shit on the page.\n            console.log(\"1 this has never been searched before\");\n            console.log(\"2 new search!\", cleanSearch);\n            var results = [];\n            axios.get(\"http://localhost:4000/twitter/user/search?username=\" + cleanSearch)\n            .then(res => {\n              // console.log(res.data.users);\n              const allUsers = res.data.users;\n              const sixSuggestions = allUsers.slice(0, 6);\n              // console.log(sixSuggestions);\n              // looping through the 6 item array to get the info we want\n              for (let k = 0; k < sixSuggestions.length; k++) {\n                let screen_name = sixSuggestions[k].screen_name;  // CUBS\n                let profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n                results.push({\"screen_name\": screen_name, \"profile_image_url\": profile_image_url});\n              }\n              var thisstateprevSearches = this.state.prevSearches; //creating pseuedo object\n              thisstateprevSearches[cleanSearch] = results;  // adding to that pseudo object\n              this.setState({ prevSearches : thisstateprevSearches});  // setting state to pseudo object\n\n            }) // END AXIOS CALL\n        } else {\n          console.log(\"a: this already has been searched\");\n          console.log(\"b:so let's query this information\");\n        }\n\n      } else {\n        // this is just a normal word being typed. NOT a tag\n        this.setState({currentSearch: \"\"});\n      }\n    }// END FOR LOOP THAT GOES THROUGH EACH WORD\n  }\n\n  handleSelect(name){\n    console.log(\"name\", name);\n    self.setState({ selected: name });\n    var currentTextArray = this.state.currentText.split(\" \");\n    for (var i = 0; i < currentTextArray.length; i++) {\n      if( currentTextArray[i] == (\"@\"+this.state.currentSearch) ){\n        currentTextArray[i] = \"@\"+this.state.selected+\" \";\n      }\n    }\n    var currentTextArrayJoined = currentTextArray.join(\" \");\n    self.setState({ curentText: currentTextArrayJoined });\n    document.getElementById(\"tweetBox\").value = this.state.currentText;\n  }\n  render() {\n    // console.log(\"render=====\");\n    // console.log(Boolean(this.state.currentSearch));\n    // console.log(this.state.currentSearch);\n    // console.log(this.state.prevSearches[this.state.currentSearch]);\n    if (this.state.currentSearch) {\n      var currentSearch = this.state.currentSearch;\n      var dataArray = this.state.prevSearches[currentSearch];\n      // console.log(\"dataArray\", dataArray);\n      if(dataArray){\n        // console.log(\"aaa\");\n        var displaySuggestions =  dataArray.map((user, index) =>\n          <Suggestion screen_name={user.screen_name} src={user.profile_image_url} onSelect={this.handleSelect} key={index}/>\n        )\n      } else{\n        // console.log(\"bbb\");\n        var displaySuggestions = \"\";\n      }\n    } else {\n      // console.log(\"not yet\");\n    }\n\n\n    return (\n      <div id=\"tweetZone\">\n        <textarea\n          type=\"text\"\n          id=\"tweetBox\"\n          onChange={this.handleChange}\n          autoFocus=\"autoFocus\"\n          maxLength=\"280\"/>\n        <p>{this.state.charactersLeft}</p>\n        <ul>{displaySuggestions}</ul>\n    </div>);\n  }\n}\n\nexport default TwitterTextArea;\n"]},"metadata":{},"sourceType":"module"}