{"ast":null,"code":"import _classCallCheck from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexkim/code/web-homework-master/src/App.js\";\nimport React, { Component } from 'react'; // import debounce from 'lodash/debounce';\n\nimport axios from 'axios'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nvar TwitterTextArea =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTextArea, _Component);\n\n  function TwitterTextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTextArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTextArea).call(this, props));\n    _this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n      prevSearches: {// \"da\" : [\n        //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n        //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n        // ]\n        // ,\n        // \"sprout\" : [\n        //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n        //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n        // ]\n      }\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.requestSuggestions = _this.requestSuggestions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.useSuggestion = _this.useSuggestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TwitterTextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var _this2 = this;\n\n      var currentText = e.target.value; // this is the entire value of textarea\n\n      this.setState({\n        currentInput: currentText,\n        charactersLeft: 280 - currentText.length\n      });\n      var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n      //now looking for any possible tagging and then making possible changes\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n          var results;\n\n          (function () {\n            // if first character is @ and second character is letter or number\n            //continue search\n            var cleanSearch = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n\n            _this2.setState({\n              currentSearch: cleanSearch\n            }); // CHECKING IF WE ALREADY HAVE SEARCHED THIS\n\n\n            if (!Boolean(_this2.state.prevSearches[cleanSearch])) {\n              // let's search for it now\n              // then get the results and store it in THIS.STATE\n              // then we're going to put that shit on the page.\n              console.log(\"1 this has never been searched before\");\n              console.log(\"2 new search!\", cleanSearch);\n              results = [];\n              axios.get(\"http://localhost:4000/twitter/user/search?username=\" + cleanSearch).then(function (res) {\n                // console.log(res.data.users);\n                var allUsers = res.data.users;\n                var sixSuggestions = allUsers.slice(0, 6); // console.log(sixSuggestions);\n                // looping through the 6 item array to get the info we want\n\n                for (var k = 0; k < sixSuggestions.length; k++) {\n                  var screen_name = sixSuggestions[k].screen_name; // CUBS\n\n                  var profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n\n                  results.push({\n                    \"screen_name\": screen_name,\n                    \"profile_image_url\": profile_image_url\n                  });\n                } // this.state.prevSearches[cleanSearch] = results;\n                // this.setState({ prevSearches: this.state.prevSearches });\n\n\n                var thisstateprevSearches = _this2.state.prevSearches;\n                thisstateprevSearches[cleanSearch] = results;\n\n                _this2.setState({\n                  prevSearches: thisstateprevSearches\n                });\n              }); // END AXIOS CALL\n            } else {\n              console.log(\"a: this already has been searched\");\n              console.log(\"b:so let's query this information\");\n            } // this.setState({ currentSearch: cleanSearch});\n\n          })();\n        } else {// this is just a normal word being typed. NOT a tag\n          }\n      } // END FOR LOOP THAT GOES THROUGH EACH WORD\n\n    }\n  }, {\n    key: \"requestSuggestions\",\n    value: function requestSuggestions(typed) {}\n  }, {\n    key: \"useSuggestion\",\n    value: function useSuggestion(name) {\n      console.log(\"selected name\", name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"render=====\");\n      console.log(Boolean(this.state.currentSearch));\n      console.log(this.state.currentSearch);\n      console.log(this.state.prevSearches[this.state.currentSearch]); // if (this.state.currentSearch) {\n      //   var currentSearch = this.state.currentSearch;\n      //   var dataArray = this.state.prevSearches[currentSearch];\n      //   console.log(\"dataArray\", dataArray);\n      //   var displaySuggestions =  dataArray.map((user, index) =>\n      //     <Suggestion screen_name={user.screen_name} src={user.profile_image_url} key={index}/>\n      //   )\n      // } else {\n      //   var displaySuggestions = \"hi\";\n      //\n      // }\n\n      var displaySuggestions = \"hi\";\n      return React.createElement(\"div\", {\n        id: \"tweetZone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        id: \"tweetBox\",\n        onChange: this.handleChange,\n        autoFocus: \"autoFocus\",\n        maxLength: \"280\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.state.charactersLeft), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, displaySuggestions));\n    }\n  }]);\n\n  return TwitterTextArea;\n}(Component);\n\nexport default TwitterTextArea;","map":{"version":3,"sources":["/Users/alexkim/code/web-homework-master/src/App.js"],"names":["React","Component","axios","Suggestion","TwitterTextArea","props","state","currentInput","currentSearch","currentSuggestions","charactersLeft","prevSearches","handleChange","bind","requestSuggestions","useSuggestion","e","currentText","target","value","setState","length","currentTextArray","split","i","test","charAt","results","cleanSearch","slice","Boolean","console","log","get","then","res","allUsers","data","users","sixSuggestions","k","screen_name","profile_image_url","push","thisstateprevSearches","typed","name","displaySuggestions"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n// import debounce from 'lodash/debounce';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport './App.css';\nimport Suggestion from './Suggestion';\n\n\n\n\nclass TwitterTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n\n      prevSearches : {\n         // \"da\" : [\n         //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n         //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n         // ]\n         // ,\n         // \"sprout\" : [\n         //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n         //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n         // ]\n       }\n\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.requestSuggestions = this.requestSuggestions.bind(this);\n    this.useSuggestion = this.useSuggestion.bind(this);\n  }\n\n\n\n\n  handleChange (e) {\n    var currentText = e.target.value; // this is the entire value of textarea\n    this.setState({\n      currentInput: currentText,\n      charactersLeft: 280 - currentText.length\n    });\n\n    var currentTextArray = currentText.split(\" \");\n    // going to split(\" \") by each word\n    //now looking for any possible tagging and then making possible changes\n    for (var i = 0; i < currentTextArray.length; i++) {\n\n\n      if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n        // if first character is @ and second character is letter or number\n        //continue search\n        let cleanSearch = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n        this.setState({ currentSearch: cleanSearch })\n\n        // CHECKING IF WE ALREADY HAVE SEARCHED THIS\n        if ( !Boolean(this.state.prevSearches[cleanSearch]) ) {\n            // let's search for it now\n            // then get the results and store it in THIS.STATE\n            // then we're going to put that shit on the page.\n            console.log(\"1 this has never been searched before\");\n            console.log(\"2 new search!\", cleanSearch);\n            var results = [];\n            axios.get(\"http://localhost:4000/twitter/user/search?username=\" + cleanSearch)\n            .then(res => {\n              // console.log(res.data.users);\n              const allUsers = res.data.users;\n              const sixSuggestions = allUsers.slice(0, 6);\n              // console.log(sixSuggestions);\n              // looping through the 6 item array to get the info we want\n              for (let k = 0; k < sixSuggestions.length; k++) {\n                let screen_name = sixSuggestions[k].screen_name;  // CUBS\n                let profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n                results.push({\"screen_name\": screen_name, \"profile_image_url\": profile_image_url});\n              }\n\n              // this.state.prevSearches[cleanSearch] = results;\n              // this.setState({ prevSearches: this.state.prevSearches });\n\n              var thisstateprevSearches = this.state.prevSearches;\n              thisstateprevSearches[cleanSearch] = results;\n              this.setState({ prevSearches : thisstateprevSearches});\n\n            }) // END AXIOS CALL\n\n\n        } else {\n          console.log(\"a: this already has been searched\");\n          console.log(\"b:so let's query this information\");\n          \n        }\n\n\n        // this.setState({ currentSearch: cleanSearch});\n\n      } else {\n        // this is just a normal word being typed. NOT a tag\n      }\n    }// END FOR LOOP THAT GOES THROUGH EACH WORD\n\n  }\n  requestSuggestions(typed) {\n\n  }\n  useSuggestion(name) {\n    console.log(\"selected name\", name);\n\n  }\n  render() {\n\n    console.log(\"render=====\");\n    console.log(Boolean(this.state.currentSearch));\n    console.log(this.state.currentSearch);\n    console.log(this.state.prevSearches[this.state.currentSearch])\n    // if (this.state.currentSearch) {\n    //   var currentSearch = this.state.currentSearch;\n    //   var dataArray = this.state.prevSearches[currentSearch];\n    //   console.log(\"dataArray\", dataArray);\n    //   var displaySuggestions =  dataArray.map((user, index) =>\n    //     <Suggestion screen_name={user.screen_name} src={user.profile_image_url} key={index}/>\n    //   )\n    // } else {\n    //   var displaySuggestions = \"hi\";\n    //\n    // }\n\n    var displaySuggestions = \"hi\";\n\n    return (\n      <div id=\"tweetZone\">\n        <textarea\n          type=\"text\"\n          id=\"tweetBox\"\n          onChange={this.handleChange}\n          autoFocus=\"autoFocus\"\n          maxLength=\"280\"/>\n        <p>{this.state.charactersLeft}</p>\n        <ul>{displaySuggestions}</ul>\n    </div>);\n  }\n}\n\nexport default TwitterTextArea;\n"]},"metadata":{},"sourceType":"module"}