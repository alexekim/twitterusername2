{"ast":null,"code":"import _classCallCheck from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexkim/code/web-homework-master/src/App.js\";\nimport React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nvar TwitterTextArea =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTextArea, _Component);\n\n  function TwitterTextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTextArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTextArea).call(this, props));\n    _this.handleChange2 = debounce(function (e) {\n      e.persist();\n      console.log(e.target.value);\n    }, 1000);\n    _this.handleChange = debounce(function (e) {\n      var currentText = e.target.value; // this is the entire value of textarea\n\n      _this.setState({\n        currentInput: currentText,\n        charactersLeft: 280 - currentText.length\n      });\n\n      var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n      //now looking for any possible tagging and then making possible changes\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n          // if first character is @ and second character is letter or number\n          //continue search\n          console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n          console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n          var noAtSymbol = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n\n          _this.requestSuggestions(noAtSymbol); // SEARCHING\n\n        }\n      } // console.log(currentText);\n\n    });\n    _this.state = {\n      currentInput: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleChange2 = _this.handleChange2.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.requestSuggestions = _this.requestSuggestions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.useSuggestion = _this.useSuggestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TwitterTextArea, [{\n    key: \"requestSuggestions\",\n    value: function requestSuggestions(typed) {\n      var _this2 = this;\n\n      axios.get(\"http://localhost:4000/twitter/user/search?username=\" + typed).then(function (res) {\n        // console.log(res.data.users);\n        var allUsers = res.data.users;\n        var sixSuggestions = allUsers.slice(0, 6);\n        console.log(sixSuggestions);\n        var FinalSuggestions = []; // looping through the 6 item array to get the info we want\n\n        for (var i = 0; i < sixSuggestions.length; i++) {\n          // console.log(sixSuggestions[i].screen_name);\n          var screen_name = sixSuggestions[i].screen_name; // console.log(sixSuggestions[i].profile_image_url);\n\n          var profile_image_url = sixSuggestions[i].profile_image_url;\n          FinalSuggestions.push({\n            screen_name: screen_name,\n            profile_image_url: profile_image_url\n          });\n        }\n\n        _this2.setState({\n          currentSuggestions: FinalSuggestions\n        });\n\n        console.log(\"=====\");\n        console.log(_this2.state);\n      });\n    }\n  }, {\n    key: \"useSuggestion\",\n    value: function useSuggestion(name) {\n      console.log(\"selected name\", name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var displaySuggestions = this.state.currentSuggestions.map(function (user, index) {\n        return React.createElement(Suggestion, {\n          screen_name: user.screen_name,\n          src: _this3.state.currentSuggestions[index].profile_image_url,\n          onClick: _this3.useSuggestion,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        id: \"tweetZone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        id: \"tweetBox\",\n        onChange: this.handleChange2,\n        autoFocus: \"autoFocus\",\n        maxLength: \"280\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, this.state.charactersLeft), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, displaySuggestions));\n    }\n  }]);\n\n  return TwitterTextArea;\n}(Component);\n\nexport default TwitterTextArea;","map":{"version":3,"sources":["/Users/alexkim/code/web-homework-master/src/App.js"],"names":["React","Component","debounce","axios","Suggestion","TwitterTextArea","props","handleChange2","e","persist","console","log","target","value","handleChange","currentText","setState","currentInput","charactersLeft","length","currentTextArray","split","i","test","charAt","warn","noAtSymbol","slice","requestSuggestions","state","currentSuggestions","bind","useSuggestion","typed","get","then","res","allUsers","data","users","sixSuggestions","FinalSuggestions","screen_name","profile_image_url","push","name","displaySuggestions","map","user","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nclass TwitterTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentInput: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n\n    this.requestSuggestions = this.requestSuggestions.bind(this);\n    this.useSuggestion = this.useSuggestion.bind(this);\n  }\n\n  handleChange2 = debounce( (e) => {\n    e.persist();\n    console.log(e.target.value);\n  }, 1000)\n\n  handleChange = debounce( (e)=> {\n    var currentText = e.target.value; // this is the entire value of textarea\n    this.setState({\n      currentInput: currentText,\n      charactersLeft: 280 - currentText.length\n    });\n    var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n\n    //now looking for any possible tagging and then making possible changes\n    for (var i = 0; i < currentTextArray.length; i++) {\n      if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n        // if first character is @ and second character is letter or number\n        //continue search\n        console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n        console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n        let noAtSymbol = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n        this.requestSuggestions(noAtSymbol); // SEARCHING\n      }\n    }\n    // console.log(currentText);\n  })\n  requestSuggestions(typed) {\n    axios.get(\"http://localhost:4000/twitter/user/search?username=\" + typed).then(res => {\n      // console.log(res.data.users);\n      const allUsers = res.data.users;\n      const sixSuggestions = allUsers.slice(0, 6);\n      console.log(sixSuggestions);\n      const FinalSuggestions = [];\n\n      // looping through the 6 item array to get the info we want\n      for (let i = 0; i < sixSuggestions.length; i++) {\n        // console.log(sixSuggestions[i].screen_name);\n        let screen_name = sixSuggestions[i].screen_name;\n        // console.log(sixSuggestions[i].profile_image_url);\n        let profile_image_url = sixSuggestions[i].profile_image_url;\n        FinalSuggestions.push({screen_name: screen_name, profile_image_url: profile_image_url});\n\n      }\n      this.setState({currentSuggestions: FinalSuggestions})\n      console.log(\"=====\");\n      console.log(this.state);\n    })\n  }\n  useSuggestion(name) {\n    console.log(\"selected name\", name);\n\n  }\n  render() {\n    const displaySuggestions = this.state.currentSuggestions.map((user, index) => <Suggestion screen_name={user.screen_name} src={this.state.currentSuggestions[index].profile_image_url} onClick={this.useSuggestion} key={index}/>)\n    return (<div id=\"tweetZone\">\n\n      <textarea\n        type=\"text\"\n        id=\"tweetBox\"\n        onChange={this.handleChange2}\n        autoFocus=\"autoFocus\"\n        maxLength=\"280\"/>\n      <p>{this.state.charactersLeft}</p>\n      <ul>{displaySuggestions}</ul>\n    </div>);\n  }\n}\n\nexport default TwitterTextArea;\n"]},"metadata":{},"sourceType":"module"}