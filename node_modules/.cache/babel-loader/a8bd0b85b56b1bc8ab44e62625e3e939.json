{"ast":null,"code":"import _classCallCheck from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/alexkim/code/web-homework-master/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/alexkim/code/web-homework-master/src/App.js\";\nimport React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios'; // import logo from './logo.svg';\n\nimport './App.css';\nimport Suggestion from './Suggestion';\n\nvar TwitterTextArea =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TwitterTextArea, _Component);\n\n  function TwitterTextArea(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTextArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTextArea).call(this, props));\n    _this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n      prevSearches: [{\n        \"@@\": \"test\" // {\"da\" : [\n        //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n        //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n        // ]\n        // },\n        // {\"sprout\" : [\n        //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n        //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n        // ]\n        // }\n\n      }]\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.requestSuggestions = _this.requestSuggestions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.useSuggestion = _this.useSuggestion.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(TwitterTextArea, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var currentText = e.target.value; // this is the entire value of textarea\n\n      this.setState({\n        currentInput: currentText,\n        charactersLeft: 280 - currentText.length\n      });\n      var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n      //now looking for any possible tagging and then making possible changes\n\n      for (var i = 0; i < currentTextArray.length; i++) {\n        if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n          // if first character is @ and second character is letter or number\n          //continue search\n          // console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n          // console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n          var noAtSymbolSearchTerm = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n          // HAVE WE ALREADY SEARCHED FOR THIS??\n          // console.log(\"already searched for \" + noAtSymbolSearchTerm + \"?:\", Boolean(this.state.prevSearches[noAtSymbolSearchTerm]));\n          // console.log(1);\n          // console.log(this.state.prevSearches[noAtSymbolSearchTerm]);\n\n          for (var j = 0; j < this.state.prevSearches.length; j++) {\n            console.log(\"??\");\n            console.log(this.state.prevSearches[j][noAtSymbolSearchTerm]);\n            Boolean(this.state.prevSearches[j][noAtSymbolSearchTerm] == false);\n\n            if (this.state.prevSearches[j][noAtSymbolSearchTerm] == false) {\n              // let's search for it now\n              // then get the results and store it in THIS.STATE\n              // then we're going to put that shit on the page.\n              console.log(\"this has never been searched before\");\n              var results = [];\n              axios.get(\"http://localhost:4000/twitter/user/search?username=\" + noAtSymbolSearchTerm).then(function (res) {\n                // console.log(res.data.users);\n                var allUsers = res.data.users;\n                var sixSuggestions = allUsers.slice(0, 6); // console.log(sixSuggestions);\n                // looping through the 6 item array to get the info we want\n\n                for (var k = 0; k < sixSuggestions.length; k++) {\n                  var screen_name = sixSuggestions[k].screen_name; // CUBS\n\n                  var profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n\n                  results.push({\n                    \"screen_name\": screen_name,\n                    \"profile_image_url\": profile_image_url\n                  });\n                }\n\n                console.log(\"results\", results); // var newSearch = {};\n                // newSearch[noAtSymbolSearchTerm] = results;\n                // this.setState({ prevSearches: newSearch });\n                // console.log(2);\n                // console.log(this.state.prevSearches[noAtSymbolSearchTerm]);\n              }); // END AXIOS CALL\n            }\n          } // this.setState({ currentSearch: noAtSymbolSearchTerm});\n\n        } else {\n          this.setState({\n            currentSearch: \"\"\n          });\n        }\n      }\n    }\n  }, {\n    key: \"requestSuggestions\",\n    value: function requestSuggestions(typed) {}\n  }, {\n    key: \"useSuggestion\",\n    value: function useSuggestion(name) {\n      console.log(\"selected name\", name);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var displaySuggestions = this.state.currentSuggestions.map(function (user, index) {\n        return React.createElement(Suggestion, {\n          screen_name: user.screen_name,\n          src: _this2.state.currentSuggestions[index].profile_image_url,\n          onClick: _this2.useSuggestion,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        });\n      });\n      return React.createElement(\"div\", {\n        id: \"tweetZone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        type: \"text\",\n        id: \"tweetBox\",\n        onChange: this.handleChange,\n        autoFocus: \"autoFocus\",\n        maxLength: \"280\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.state.charactersLeft), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, displaySuggestions));\n    }\n  }]);\n\n  return TwitterTextArea;\n}(Component);\n\nexport default TwitterTextArea;","map":{"version":3,"sources":["/Users/alexkim/code/web-homework-master/src/App.js"],"names":["React","Component","debounce","axios","Suggestion","TwitterTextArea","props","state","currentInput","currentSearch","currentSuggestions","charactersLeft","prevSearches","handleChange","bind","requestSuggestions","useSuggestion","e","currentText","target","value","setState","length","currentTextArray","split","i","test","charAt","noAtSymbolSearchTerm","slice","j","console","log","Boolean","results","get","then","res","allUsers","data","users","sixSuggestions","k","screen_name","profile_image_url","push","typed","name","displaySuggestions","map","user","index"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport debounce from 'lodash/debounce';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport './App.css';\nimport Suggestion from './Suggestion';\n\n\n\n\nclass TwitterTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentInput: \"\",\n      currentSearch: \"\",\n      currentSuggestions: [],\n      charactersLeft: 280,\n\n      prevSearches : [\n        { \"@@\": \"test\"}\n         // {\"da\" : [\n         //   {\"screen_name\": \"Dan\", \"profile_image_url\": \"dan.jpg\"},\n         //   {\"screen_name\": \"David\", \"profile_image_url\": \"david.jpg\"}\n         // ]\n         // },\n         // {\"sprout\" : [\n         //    {\"screen_name\": \"SproutSocial\", \"profile_image_url\": \"sprout.jpg\"},\n         //    {\"screen_name\": \"SproutSupport\", \"profile_image_url\": \"support.jpg\"}\n         // ]\n         // }\n       ]\n\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.requestSuggestions = this.requestSuggestions.bind(this);\n    this.useSuggestion = this.useSuggestion.bind(this);\n  }\n\n\n\n  handleChange (e) {\n    var currentText = e.target.value; // this is the entire value of textarea\n    this.setState({\n      currentInput: currentText,\n      charactersLeft: 280 - currentText.length\n    });\n\n    var currentTextArray = currentText.split(\" \"); // going to split(\" \") by each word\n    //now looking for any possible tagging and then making possible changes\n    for (var i = 0; i < currentTextArray.length; i++) {\n      if (/[a-zA-Z0-9]/.test(currentTextArray[i].charAt(1)) && /^(@)/.test(currentTextArray[i]) && currentTextArray[i].length >= 3) {\n        // if first character is @ and second character is letter or number\n        //continue search\n        // console.warn(\"currentTextArray[i]:\", currentTextArray[i]);\n        // console.log(\"first character is @. second character is a letter or number. more than one @12. so we're going to run the API search\");\n        let noAtSymbolSearchTerm = currentTextArray[i].slice(1); // just getting rid of the @ sign for search\n\n        // HAVE WE ALREADY SEARCHED FOR THIS??\n        // console.log(\"already searched for \" + noAtSymbolSearchTerm + \"?:\", Boolean(this.state.prevSearches[noAtSymbolSearchTerm]));\n        // console.log(1);\n        // console.log(this.state.prevSearches[noAtSymbolSearchTerm]);\n\n        for (var j = 0; j < this.state.prevSearches.length; j++) {\n          console.log(\"??\");\n          console.log(this.state.prevSearches[j][noAtSymbolSearchTerm]);\n          Boolean(this.state.prevSearches[j][noAtSymbolSearchTerm] == false);\n          if(this.state.prevSearches[j][noAtSymbolSearchTerm] == false ){\n            // let's search for it now\n            // then get the results and store it in THIS.STATE\n            // then we're going to put that shit on the page.\n            console.log(\"this has never been searched before\");\n            var results = [];\n\n            axios.get(\"http://localhost:4000/twitter/user/search?username=\" + noAtSymbolSearchTerm).then(res => {\n              // console.log(res.data.users);\n              const allUsers = res.data.users;\n              const sixSuggestions = allUsers.slice(0, 6);\n              // console.log(sixSuggestions);\n\n              // looping through the 6 item array to get the info we want\n              for (let k = 0; k < sixSuggestions.length; k++) {\n                let screen_name = sixSuggestions[k].screen_name;  // CUBS\n                let profile_image_url = sixSuggestions[k].profile_image_url; //cubs.jpg\n                results.push({\"screen_name\": screen_name, \"profile_image_url\": profile_image_url});\n              }\n              console.log(\"results\", results);\n\n              // var newSearch = {};\n              // newSearch[noAtSymbolSearchTerm] = results;\n              // this.setState({ prevSearches: newSearch });\n              // console.log(2);\n              // console.log(this.state.prevSearches[noAtSymbolSearchTerm]);\n            }) // END AXIOS CALL\n          }\n        }\n\n\n        // this.setState({ currentSearch: noAtSymbolSearchTerm});\n\n      } else {\n        this.setState({ currentSearch: \"\"});\n\n      }\n    }\n\n  }\n  requestSuggestions(typed) {\n\n  }\n  useSuggestion(name) {\n    console.log(\"selected name\", name);\n\n  }\n  render() {\n    const displaySuggestions = this.state.currentSuggestions.map((user, index) =>\n      <Suggestion screen_name={user.screen_name} src={this.state.currentSuggestions[index].profile_image_url} onClick={this.useSuggestion} key={index}/>\n    )\n    return (\n      <div id=\"tweetZone\">\n        <textarea\n          type=\"text\"\n          id=\"tweetBox\"\n          onChange={this.handleChange}\n          autoFocus=\"autoFocus\"\n          maxLength=\"280\"/>\n        <p>{this.state.charactersLeft}</p>\n        <ul>{displaySuggestions}</ul>\n    </div>);\n  }\n}\n\nexport default TwitterTextArea;\n"]},"metadata":{},"sourceType":"module"}